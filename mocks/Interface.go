// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/UnknownOlympus/oracle/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// DeleteUserByID provides a mock function with given fields: ctx, telegramID
func (_m *Interface) DeleteUserByID(ctx context.Context, telegramID int64) error {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveTasksByExecutor provides a mock function with given fields: ctx, telegramID
func (_m *Interface) GetActiveTasksByExecutor(ctx context.Context, telegramID int64) ([]models.ActiveTask, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveTasksByExecutor")
	}

	var r0 []models.ActiveTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.ActiveTask, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.ActiveTask); ok {
		r0 = rf(ctx, telegramID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ActiveTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompletedTasksByExecutor provides a mock function with given fields: ctx, telegramID, from, to
func (_m *Interface) GetCompletedTasksByExecutor(ctx context.Context, telegramID int64, from time.Time, to time.Time) ([]models.TaskDetails, error) {
	ret := _m.Called(ctx, telegramID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetCompletedTasksByExecutor")
	}

	var r0 []models.TaskDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) ([]models.TaskDetails, error)); ok {
		return rf(ctx, telegramID, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) []models.TaskDetails); ok {
		r0 = rf(ctx, telegramID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TaskDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time, time.Time) error); ok {
		r1 = rf(ctx, telegramID, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployee provides a mock function with given fields: ctx, telegramID
func (_m *Interface) GetEmployee(ctx context.Context, telegramID int64) (models.Employee, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployee")
	}

	var r0 models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.Employee, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Employee); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(models.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskDetailsByID provides a mock function with given fields: ctx, taskID
func (_m *Interface) GetTaskDetailsByID(ctx context.Context, taskID int) (*models.TaskDetails, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskDetailsByID")
	}

	var r0 *models.TaskDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.TaskDetails, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.TaskDetails); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskSummary provides a mock function with given fields: ctx, telegramID, startDate, endDate
func (_m *Interface) GetTaskSummary(ctx context.Context, telegramID int64, startDate time.Time, endDate time.Time) ([]models.TaskSummary, error) {
	ret := _m.Called(ctx, telegramID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskSummary")
	}

	var r0 []models.TaskSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) ([]models.TaskSummary, error)); ok {
		return rf(ctx, telegramID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time) []models.TaskSummary); ok {
		r0 = rf(ctx, telegramID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TaskSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time, time.Time) error); ok {
		r1 = rf(ctx, telegramID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksInRadius provides a mock function with given fields: ctx, lat, lng, radius
func (_m *Interface) GetTasksInRadius(ctx context.Context, lat float32, lng float32, radius int) ([]models.ActiveTask, error) {
	ret := _m.Called(ctx, lat, lng, radius)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksInRadius")
	}

	var r0 []models.ActiveTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float32, float32, int) ([]models.ActiveTask, error)); ok {
		return rf(ctx, lat, lng, radius)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float32, float32, int) []models.ActiveTask); ok {
		r0 = rf(ctx, lat, lng, radius)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ActiveTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float32, float32, int) error); ok {
		r1 = rf(ctx, lat, lng, radius)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserAuthenticated provides a mock function with given fields: ctx, telegramID
func (_m *Interface) IsUserAuthenticated(ctx context.Context, telegramID int64) (bool, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserAuthenticated")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkTelegramIDByEmail provides a mock function with given fields: ctx, telegramID, email
func (_m *Interface) LinkTelegramIDByEmail(ctx context.Context, telegramID int64, email string) error {
	ret := _m.Called(ctx, telegramID, email)

	if len(ret) == 0 {
		panic("no return value specified for LinkTelegramIDByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, telegramID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
